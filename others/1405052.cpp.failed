#include <bits/stdc++.h>
using namespace std;

#define si(x) scanf("%d",&x)
#define sf(x) scanf("%f",&x)

#define pi(x) printf("%d\n",x)
#define pf(x) printf("%.4f\n",x)

#define ll long long int

#define sll(x) scanf("%I64d",&x);
#define pll(x) printf("%-I64d\n",x);
/** ALL functions */
bool myAssert(bool b);
void testDrivenDevelopment();
int start(int argc=0, char const *argv[] = NULL);
void takeInput();
void mydestructor();
int D(int i);
int klheuristic(int u, int v);
void KL_Algo( vector<int> const& s);  // FAILED!!!
void klalgo(vector<int> const& input);
int getCutSize(vector<int> const& p1, vector<int> const& p2);

/** ALL variables */
int n,m;
vector< int > *g;
bool *isvisited;
int *inedge, *outedge;
int totalPartition;
string s;
vector<string> vs;
queue< vector <int> > partitions;
// vector< pair< pair<int,int> , int >, pair<int, int> > logTable;

map< pair<int, int> , int > CE;

/** end var */

int klheuristic(int u, int v){  
  int ret;
  ret = D(u) + D(v) - 2*CE[{u,v}];
  return ret;
}
int D(int i){
  int ret=0;
  ret = inedge[i] - outedge[i];
  return ret;
}

void takeInput(){
  cin>>totalPartition;
  while(getline(cin, s)){
    if(s!="")
      vs.push_back(s);
  }
  n = vs.size();
  g = new vector<int>[n+1];
  isvisited = new bool[n+1];
  inedge = new int[n+1];
  outedge = new int[n+1];

  for(int i=0; i<=n; i++){  isvisited[i] = false; inedge[i] = 0; outedge[i] = 0; }

  for(int i=0; i<vs.size(); i++){
      istringstream iss(vs[i]);

      int i1=0;
      string a = "";
      int u,v;
      while(iss >> a){
        i1++;
        if(i1==1){ u = stoi(a); }//cout<<a<<" : ";}
        if(i1>=3){ v = stoi(a); g[u].push_back(v); /*inedge[v]++; outedge[u]++;*/ CE[{u,v}] = 1;  }//cout<<a<<" "; }
        //cout<<a<<" ";

      } //cout<<"\n";
  }
}

void mydestructor(){
  if(!g)delete[] g;
  if(!isvisited)delete[] isvisited;
  if(!inedge)delete[] inedge;
  if(!outedge)delete[] outedge;
  cout<<"memory freed!\n";
}

int getCutSize(vector<int> const& p1, vector<int> const& p2){
  int cutsize = 0;
  for(int i=0; i<p1.size(); i++){
    for(int j=0; j<p2.size(); j++){
      
      cutsize += CE[{ p1[i] , p2[j] }];
    }
  }
  return cutsize;
}


void testDrivenDevelopment(){
    for(int i=01; i<=n; i++){
    cout<<i<<" --> ";
    for(int j=0; j<g[i].size(); j++){
      cout<<g[i][j]<<" ";
    }cout<<"\n";
  }

  for(int i=01; i<=n; i++){
    cout<<inedge[i]<<" ";
  }cout<<"\n";

    for(int i=01; i<=n; i++){
    cout<<outedge[i]<<" ";
  }cout<<"\n";

  CE[{10,11}] = 1;
  cout<<"DEBUG\n";
  cout<<"CE[{10,11}] = "<<CE[{10,11}]<<"\n";
  cout<<"CE[{11,12}] = "<<CE[{11,12}]<<"\n";

  cout<<" D(3) + D(5) = "<<(D(3) + D(5))<<"\n";
 
  cout<<" D(4) + D(6) = "<<(D(4) + D(6))<<"\n";

  cout<<"klheuristics 3,5 : "<< klheuristic(3,5)<<"\n";
  cout<<"klheuristics 4,6 : "<< klheuristic(4,6)<<"\n";


  vector<int> test ;
  for(int i=1; i<=8; i++){  test.push_back(i);  }
  klalgo(test);
  
}


void klalgo(vector<int> const& input){
  // assuming valid input!
 
    vector<int> final1, final2;
  for(int i=0; i<input.size()/2; i++){
    final1.push_back(input[i]);
  }
  for(int i=input.size()/2; i<input.size(); i++){
    final2.push_back(input[i]);
  }

  bool isUnlocked[n+10];
  for(int i=0; i<n+10; i++){  isUnlocked[i] = false; }
  for(int i=0; i<input.size(); i++){  int x = input[i]; isUnlocked[x] = true; }

// variables!!! 

  bool outerLoopBool = true, innerLoopBool;
  int innerLoopCount = final1.size();
  int mycutsize = getCutSize(final1,final2);
  int lowestCutSize =   INT_MAX;
  int lowestCutSizeIndex = 0;
  vector< pair<int, int> > tentativeExchange;
    vector< pair<int, int> > tentativeExchangeIndex;
  vector<int> g;
  vector<int> gs;
  vector<int> cs;



  int Dmax = INT_MIN;
  int amax=0, bmax=0, aind=0, bind=0 ;
  // variables end
  tentativeExchange.push_back({0,0});
  tentativeExchangeIndex.push_back({-1,-1});

  g.push_back(0);
  gs.push_back(0);

  cs.push_back(mycutsize);

/*
cout<<"\n\n-------DEBUG 352 -------\n\n";
  cout<<mycutsize<<"\n"; 
  for(int i=0; i<final1.size(); i++){ cout<<final1[i]<<" "; } cout<<"\n";
  for(int i=0; i<final2.size(); i++){ cout<<final2[i]<<" "; } cout<<"\n";
  for(int i=0; i<=n; i++){  cout<<isUnlocked[i]<<" "; }cout<<"\n";
  cout<<"\n\n-------DEBUG 352 -------\n\n";
/*  */
  int outerLoopCount = 0;
  while(outerLoopBool){
    outerLoopCount++;
    if(outerLoopCount==2){  break; }
    cout<<"\n**************************************************\n";
    cout<<"\nOuter Iteration "<<outerLoopCount<<" :\n";
    cout<<"\n--------------------------------------------------\n";

  vector<int> p1, p2;
  for(int i=0; i<final1.size(); i++){ p1.push_back(final1[i]);  }
  for(int i=0; i<final2.size(); i++){ p2.push_back(final2[i]);  }     
      //for(int i=1; i<=n; i++){  if(isUnlocked[i])  }
      while(innerLoopCount--){
        
        for(int i=0; i<p1.size(); i++){
          int a = p1[i];
          if(isUnlocked[a]){
            for(int j=0; j<p2.size(); j++){
              int b = p2[j];
              if(isUnlocked[b]){
                //cout<<"line 200\n";
                //cout<<"Dmax="<<Dmax<<" , "<<"( D(a) + D(b) ) = "<<( D(a) + D(b) )<<"\n";
                
                if( Dmax < ( D(a) + D(b) )  ){
                  //cout<<"---------- debug 192 --------\n";
                  Dmax = ( D(a) + D(b) );
                  amax = a;
                  bmax = b;
                  aind = i;
                  bind = j; 
                }
              }

            }
          }
        }
        //cout<<"before\n";
        //for(int i=0; i<p1.size(); i++){ cout<<p1[i]<<" "; }cout<<"\n";
        //for(int i=0; i<p2.size(); i++){ cout<<p2[i]<<" "; }cout<<"\n";

        int temp = p1[aind];
        p1[aind] = p2[bind];
        p2[bind] = temp;
        //cout<<"after\n";
        //for(int i=0; i<p1.size(); i++){ cout<<p1[i]<<" "; }cout<<"\n";
        //for(int i=0; i<p2.size(); i++){ cout<<p2[i]<<" "; }cout<<"\n";

        isUnlocked[amax] = false;
        isUnlocked[bmax] = false;

        Dmax = INT_MIN;
        
        tentativeExchange.push_back({amax,bmax});
        tentativeExchangeIndex.push_back({aind, bind });

        //cout<<"\n\n----------debug 230 --------\n\n";
        //cout<<"amax bmax "<<amax<<" "<<bmax<<"\n";

        int prev_cs = cs[ cs.size() - 1 ];
      
        int c = getCutSize(p1,p2);
        cs.push_back(c);


        //cout<<"\n\ndebug ----- 233\n\n";
        //cout<<"c = "<<c<<" --- lowestCutSize = "<<lowestCutSize<<"\n";
          //outerLoopBool = false; 
        // if(c < lowestCutSize){  lowestCutSize = c; outerLoopBool = true; lowestCutSizeIndex = cs[ cs.size() - 1 ];  }

        int g_last = prev_cs - c;
      g.push_back(g_last);

      int gs_last = gs[gs.size() - 1];
      gs.push_back(gs_last + g_last);

      }
      outerLoopBool = false; 
      int tempLowestCutsize = INT_MAX;
      int tempLowestCutsizeIndex = 0;
      for(int i=0; i<cs.size(); i++)
      { if(cs[i] < tempLowestCutsize){  tempLowestCutsize = cs[i];  tempLowestCutsizeIndex = i ;  }}
      
      if(tempLowestCutsize < lowestCutSize){  
        // improvement okke! :D 
        outerLoopBool = true;
        lowestCutSize = tempLowestCutsize;
        lowestCutSizeIndex = tempLowestCutsizeIndex;
      }else{  outerLoopBool = false; }
      cout<<"\n      Inner Iteration :      \n";
      if(outerLoopBool){

            // PRINT TABLE!!!
            cout<<"Step	Pair	G	Sum-G	Cutsize\n";
            cout<<"  0    -   -    -    "<<cs[0]<<"\n";
            for(int i=1; i<cs.size(); i++){
              cout<<i<<"  <"<<tentativeExchange[i].first<<","<<tentativeExchange[i].second<<"> "<<g[i]<<" "<<gs[i]<<" "<<cs[i]<<"\n";
            }

        // ACTUAL CHANGE
        for(int i=0; i<=lowestCutSizeIndex; i++){
          int x = tentativeExchangeIndex[i].first;
          int y = tentativeExchangeIndex[i].second;

          int temp = final1[x];
           final1[x] = final2[y] ;
           final2[y] = temp;
        
        }
              cout<<"\n";
      cout<<"p1 : {";
      for(int i=0; i<final1.size(); i++){ cout<<final1[i]<<" "; }
      cout<<"}\n";

      cout<<"p2 : {";
      for(int i=0; i<final2.size(); i++){ cout<<final2[i]<<" "; }
      cout<<"}\n";

      cout<<"CutSize:  "<<lowestCutSize<<"\n";
      cout<<"\n---------------------------------------------------\n";

      }else{
        cout<<"\nNo Improvement\n";
      partitions.push(final1);
      partitions.push(final2);
      return; 
      }
  }
}


int main(int argc=0, char const *argv[] = NULL)
{
	/* code */
  /* Soln soln */
  try{
    freopen("input_KL.txt","r",stdin);
    // freopen("output.txt","w",stdout);

  }catch(exception& x){
    cout<<"Exception!"<<x.what()<<"\n";
  }
  
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);

  takeInput();

  vector<int> s1;
  for(int i=1; i<=n; i++){
    s1.push_back(i);
  }
  /*
  partitions.push(s1);

  while(partitions.size()!=totalPartition){
    vector<int> s2 = partitions.front();
    partitions.pop();
    KL_Algo(s2);
    //klalgo(s2);
  }
  
  cout<<"\n**************************************************\n";
  cout<<"Final Partitions:\n";
  int i098 = 1;
while(!partitions.empty()){
  cout<<"p"<<i098<<" : { ";
  i098++;
    vector<int> s2 = partitions.front();
    partitions.pop();
  for(int i=0; i<s2.size(); i++){
    cout<<s2[i]<<" ";
  }
  cout<<" }\n";
}

*/

    cout<<"\n***************  TEST ***********************************\n";
  testDrivenDevelopment();
  

  //cout<<vs.size()<<"\n";
  mydestructor();
  return 0;
}


